Zu composer
Blockchain State Storage\\
All transactions submitted through a business network are stored on the blockchain ledger, and the current state of assets and participants are stored in the blockchain state database. The blockchain distributes the ledger and the state database across a set of peers and ensures that updates to the ledger and state database are consistent across all peers using a consensus algorithm.
\medskip
Connection Profiles\\
Hyperledger Composer uses Connection Profiles to define the system to connect to. A connection profile is a JSON document the is part of a business network card. These profiles are usually provided by the creator of the system they refer to and should be used to create business network cards in order to be able to connect to that system.
\medskip
Assets\\
Assets are tangible or intangible goods, services, or property, and are stored in registries. Assets can represent almost anything in a business network, for example, a house for sale, the sale listing, the land registry certificate for that house, and the insurance documents for that house may all be assets in one or more business networks.

Assets must have a unique identifier, but other than that, they can contain whatever properties you define. Assets may be related to other assets or participants.
\medskip
Participants\\
Participants are members of a business network. They may own assets and submit transactions. Participant types are modeled, and like assets, must have an identifier and can have any other properties as required. A participant can be mapped to one or multiple identities.
\medskip
Identities\\
An identity is a digital certificate and private key. Identities are used to transact on a business network and must be mapped to a participant in the business network. A single identity is stored in a business network card and if that identity has been mapped to a participant, it allows the user of that business network card to transact on a business network as that participant.
\medskip
Business Network cards\\
Business network cards are a combination of an identity, a connection profile, and metadata, the metadata optionally containing the name of the business network to connect to. Business network cards simplify the process of connecting to a business network, and extend the concept of an identity outside the business network to a 'wallet' of identities, each associated with a specific business network and connection profile.
\medskip
Transactions\\
Transactions are the mechanism by which participants interact with assets. This could be as simple as a participant placing a bid on a asset in an auction, or an auctioneer marking an auction closed, automatically transferring ownership of the asset to the highest bidder.
\medskip
Queries\\
Queries are used to return data about the blockchain world-state. Queries are defined within a business network, and can include variable parameters for simple customization. By using queries, data can be easily extracted from your blockchain network. Queries are sent by using the Hyperledger Composer API.
\medskip
Events\\
Events are defined in the business network definition in the same way as assets or participants. Once events have been defined, they can be emitted by transaction processor functions to indicate to external systems that something of importance has happened to the ledger. Applications can subscribe to emitted events through the composer-client API.
\medskip
Access Control\\
Business networks may contain a set of access control rules. Access control rules allow fine-grained control over what participants have access to what assets in the business network and under what conditions. The access control language is rich enough to capture sophisticated conditions declaratively, such as "only the owner of a vehicle can transfer ownership of the vehicle". Externalizing access control from transaction processor function logic makes it easier to inspect, debug, develop and maintain.
\medskip
Historian registry\\
The historian is a specialised registry which records successful transactions, including the participants and identities that submitted them. The historian stores transactions as HistorianRecord assets, which are defined in the Hyperledger Composer system namespace.
\medskip
The Hyperledger Composer Historian is a specialised registry which records successful transactions, including the participants and identities that submitted them. The historian stores transactions as HistorianRecord assets, which are defined in the Hyperledger Composer system namespace.
\medskip
An ID card (or card for short) is a collection of files that contains all the information necessary to allow a participant to connect to a business network. The card is referred to as an identity. Before it can be used, it must be issued to the user, allowing him or her to be authenticated and authorized to use the network. Cards are a very handy way of securing access to a Hyperledger Fabric network. Rather than keeping up with a password (called a secret in Hyperledger Composer terminology), you import the card into a collection of cards in the Hyperledger Fabric called a wallet. From that point on, you can just reference the card to authenticate that identity.




    
Zu Anforderungen an den Prototypen

Aus \cite{Miessler2015}(\gls{owasp})
    \begin{itemize}[noitemsep]
        \item Authentication/\-Authorization: starke Passwörter, granulares Access Control, Anmeldedaten sichern, Passwortrücksetzung muss sicher sein, re-authentication für sensible Funktionen, Options for password controls?, Entzug der Anmeldedaten möglich, Authentifizierung für App, Gerät, Server, auf Server managen und müssen unique sein: UserID, UserDeviceID, UserAppID, Token/\-Session Key müssen immer unterschiedlich sein
        \item Network Services: nur nötige Ports exposen, keine Buffer Overflow und Fuzzing Angriffe zulassen, kein DoS (für ein Gerät und auswirkungen auf andere Geräte), unregelmäßiger Servicerequest-Verkehr sollte beim Service-Gateway erkannt und blockiert werden
        \item Transport Encyption: SSL/\-TLS verwenden, weitere standardisierte Verschlüsselungen verwenden (falls SSL/\-TLS nicht verfügbar), Message Payload Encryption, Secure Encryption Key Handshaking, received Data Integrity verification
        \item Privacy: nur dringend nötige Daten des Gerätes und der Person sammeln, möglichst keine sensiblen Daten sammeln, gesammelte Daten nicht identifizierbar machen oder anonymisieren, gesammelte Daten durch Verschlüsselung schützen, Gerät und alle Komponenten zielen darauf auf ab persönliche Informationen zu schützen, nur autorisierte Entitäten haben Zugang zu persönlichen Informationen, pers. Daten werden nur für einen bestimmten Zeitraum gespeichert, Nutzer muss mit Informationen und Wahl beliefert werden falls mehr als erwartet gesammelt wird, RBAC für die Daten, analysierte Daten nicht identifizierbar
        \item Cloud Interface: Enumeration verhindern, keine default Anmeldedaten, Lockout nach 3-5 Versuchen, kein XSS/\-SQLi/\-CSRF, Anmeldedaten nicht plain versenden, 2factor, unrelgelmäßigen Verkehr erkennen und blockieren
        \item Mobile Interface: keine default Anmeldedaten, wie Cloud, App obfuscation, App Anti-Tampering, Memory protection, restrict Apps execution on tampered OS environment
        \item Security Configurability: Trennung normale und Adminuser, Verschlüsselung von Daten (still oder übertragen), nur startke Pw, Logging of security events and inform user
        \item secure update mechanism, update fiile encrypted, update via encrypted connection, update file doesn't expose senisitive data, update signed and verified, secure update server, secure boot if possible
    \end{itemize}